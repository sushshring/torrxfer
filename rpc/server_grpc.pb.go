// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RpcTorrxferServerClient is the client API for RpcTorrxferServer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RpcTorrxferServerClient interface {
	// Transfer a stream of bytes for a file and returns the summary of the transferred file
	TransferFile(ctx context.Context, in *TransferFileRequest, opts ...grpc.CallOption) (*FileSummary, error)
	// Query the status of the transferred file and return a summary of the file
	QueryFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileSummary, error)
}

type rpcTorrxferServerClient struct {
	cc grpc.ClientConnInterface
}

func NewRpcTorrxferServerClient(cc grpc.ClientConnInterface) RpcTorrxferServerClient {
	return &rpcTorrxferServerClient{cc}
}

func (c *rpcTorrxferServerClient) TransferFile(ctx context.Context, in *TransferFileRequest, opts ...grpc.CallOption) (*FileSummary, error) {
	out := new(FileSummary)
	err := c.cc.Invoke(ctx, "/RpcTorrxferServer/TransferFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rpcTorrxferServerClient) QueryFile(ctx context.Context, in *File, opts ...grpc.CallOption) (*FileSummary, error) {
	out := new(FileSummary)
	err := c.cc.Invoke(ctx, "/RpcTorrxferServer/QueryFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RpcTorrxferServerServer is the server API for RpcTorrxferServer service.
// All implementations must embed UnimplementedRpcTorrxferServerServer
// for forward compatibility
type RpcTorrxferServerServer interface {
	// Transfer a stream of bytes for a file and returns the summary of the transferred file
	TransferFile(context.Context, *TransferFileRequest) (*FileSummary, error)
	// Query the status of the transferred file and return a summary of the file
	QueryFile(context.Context, *File) (*FileSummary, error)
	mustEmbedUnimplementedRpcTorrxferServerServer()
}

// UnimplementedRpcTorrxferServerServer must be embedded to have forward compatible implementations.
type UnimplementedRpcTorrxferServerServer struct {
}

func (UnimplementedRpcTorrxferServerServer) TransferFile(context.Context, *TransferFileRequest) (*FileSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TransferFile not implemented")
}
func (UnimplementedRpcTorrxferServerServer) QueryFile(context.Context, *File) (*FileSummary, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryFile not implemented")
}
func (UnimplementedRpcTorrxferServerServer) mustEmbedUnimplementedRpcTorrxferServerServer() {}

// UnsafeRpcTorrxferServerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RpcTorrxferServerServer will
// result in compilation errors.
type UnsafeRpcTorrxferServerServer interface {
	mustEmbedUnimplementedRpcTorrxferServerServer()
}

func RegisterRpcTorrxferServerServer(s grpc.ServiceRegistrar, srv RpcTorrxferServerServer) {
	s.RegisterService(&RpcTorrxferServer_ServiceDesc, srv)
}

func _RpcTorrxferServer_TransferFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TransferFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcTorrxferServerServer).TransferFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcTorrxferServer/TransferFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcTorrxferServerServer).TransferFile(ctx, req.(*TransferFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RpcTorrxferServer_QueryFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(File)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RpcTorrxferServerServer).QueryFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RpcTorrxferServer/QueryFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RpcTorrxferServerServer).QueryFile(ctx, req.(*File))
	}
	return interceptor(ctx, in, info, handler)
}

// RpcTorrxferServer_ServiceDesc is the grpc.ServiceDesc for RpcTorrxferServer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RpcTorrxferServer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RpcTorrxferServer",
	HandlerType: (*RpcTorrxferServerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "TransferFile",
			Handler:    _RpcTorrxferServer_TransferFile_Handler,
		},
		{
			MethodName: "QueryFile",
			Handler:    _RpcTorrxferServer_QueryFile_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "server.proto",
}
